DISCLAIMER

 Kernel-space development can be hazardous to both you and your
 computer. Don't do it unless you know what to do and/or like danger
 :)


INTRODUCTION

This is a small example of a kernel extension project. It does nothing
but create a device node in /dev/darwinsound0.

To compile the kernel extension, type "make all", to make it ready for
loading type "sudo make dist", and to load it, type "sudo make load".


FILES

DarwinSound.strings
 Contains the Info.plist keys for you're kernel extension.

Makefile config.mak
 The build system. The Makefile requires GNU Make and is ready to use,
 but config.mak will need to be adapted to your project.
 
darwinsound_module.c darwinsound_module.h
 The C code for the module.

util/
 A small utility for converting property lists from the human-friendly
 ASCII strings format to the machine-friendly XML plist format.

MAKING IT YOUR OWN

To adapt this code to your own project, you should do the following:

1. Choose a name for your kernel extension to replace "DarwinSound", and
   something to prefix all functions with instead of "darwinsound_".

2. Change the prefix of the darwinsound_* functions in darwinsound_module.c and
   darwinsound_module.h. Remember to adapt KMOD_EXPLICIT_DECL() in
   darwinsound_module.c to these changes. Change the prefix of the two
   files, and update OBJS in config.mak and the #include in
   darwinsound_module.c to reflect this.

3. Change CFBundleExecutable and CFBundleName in DarwinSound.strings and
   PRODUCT in config.mak to the name of your kext. Rename
   DarwinSound.strings to YourKextName.strings.

4. Choose a unique bundle identifyer for your extension, and copy it
   to CFBundleIdentifier in DarwinSound.strings and the first argument of
   KMOD_EXPLICIT_DECL().

COPYRIGHT

 Copyright (c) 2004 Dan Christiansen
 You may do anything with with this text but claim you wrote it.